%%
%% This is file `sysuthesis.bst',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% merlin.mbs  (with options: `head,exlang,lang,annote,seq-no,nm-rv,jnrlst,nmlm,x3,m3,mcite,mct-3,mct-x3,dt-jnl,xmth,yrpp-xsp,atit-u,jttl-rm,vol-bf,pp-last,jwdvol,num-xser,btit-rm,bt-rm,bkpg-x,add-pub,pub-date,pub-xpar,pre-pub,in-x,ppx,xedn,xand,url,url-blk,em-x,nfss,,{}')
%% merlin.mbs  (with options: `tail,exlang,lang,annote,seq-no,nm-rv,jnrlst,nmlm,x3,m3,mcite,mct-3,mct-x3,dt-jnl,xmth,yrpp-xsp,atit-u,jttl-rm,vol-bf,pp-last,jwdvol,num-xser,btit-rm,bt-rm,bkpg-x,add-pub,pub-date,pub-xpar,pre-pub,in-x,ppx,xedn,xand,url,url-blk,em-x,nfss,,{}')
%% ----------------------------------------
%% *** SYSU thesis style ***
%% 
%% Copyright 1994-2011 Patrick W Daly
% ===============================================================
% IMPORTANT NOTICE:
% This bibliographic style (bst) file has been generated from one or
% more master bibliographic style (mbs) files, listed above.
%
% This generated file can be redistributed and/or modified under the terms
% of the LaTeX Project Public License Distributed from CTAN
% archives in directory macros/latex/base/lppl.txt; either
% version 1 of the License, or any later version.
% ===============================================================
% Name and version information of the main mbs file:
% \ProvidesFile{merlin.mbs}[2011/11/18 4.33 (PWD, AO, DPC)]
%   For use with BibTeX version 0.99a or later
%-------------------------------------------------------------------
% This bibliography style file is intended for texts in
% This is a numerical citation style, and as such is standard LaTeX.
% It requires no extra package to interface to the main text.
% The form of the \bibitem entries is
%   \bibitem{key}...
% Usage of \cite is as follows:
%   \cite{key} ==>>          [#]
%   \cite[chap. 2]{key} ==>> [#, chap. 2]
% where # is a number determined by the ordering in the reference list.
% The order in the reference list is that by which the works were originally
%   cited in the text, or that in the database.
%---------------------------------------------------------------------

ENTRY
  { address
    annote
    author
    booktitle
    chapter
    date
    edition
    editor
    eid
    howpublished
    institution
    journal
    key
    language
    month
    note
    number
    organization
    pages
    publisher
    school
    series
    title
    type
    url
    volume
    year
  }
  {}
  { label }
INTEGERS { output.state before.all mid.sentence after.sentence after.block }
FUNCTION {init.state.consts}
  { #0 'before.all :=
    #1 'mid.sentence :=
    #2 'after.sentence :=
    #3 'after.block :=
  }
STRINGS { s t}
FUNCTION {output.nonnull}
{ 's :=
output.state mid.sentence =
{ ", " * write$ }
  { output.state after.block =
    { add.period$ write$
      newline$
        "\newblock " write$
    }
    { output.state before.all =
      'write$
        { add.period$ " " * write$ }
        if$
    }
  if$
mid.sentence 'output.state :=
}
if$
  s
  }
  FUNCTION {output}
    { duplicate$ empty$
      'pop$
        'output.nonnull
        if$
    }
  FUNCTION {output.check}
    { 't :=
      duplicate$ empty$
      { pop$ "empty " t * " in " * cite$ * warning$ }
      'output.nonnull
      if$
    }
  FUNCTION {fin.entry}
    { add.period$
        write$
      newline$
        annote missing$
      { "\bibAnnoteFile{" cite$ * "}" * write$ newline$ }
        { "\bibAnnote{" cite$ * "}{" * annote * "}" * write$ newline$
        }
      if$
    }

  FUNCTION {new.block}
    { output.state before.all =
      'skip$
        { after.block 'output.state := }
        if$
    }
  FUNCTION {new.sentence}
    { output.state after.block =
      'skip$
        { output.state before.all =
            'skip$
              { after.sentence 'output.state := }
              if$
          }
        if$
    }
  FUNCTION {add.blank}
    {  " " * before.all 'output.state :=
    }

  FUNCTION {no.blank.or.punct}
    {  "\hspace{0pt}" * before.all 'output.state :=
    }

  FUNCTION {date.block}
    {
      new.block
    }

  FUNCTION {not}
    {   { #0 }
        { #1 }
      if$
    }
  FUNCTION {and}
    {   'skip$
        { pop$ #0 }
        if$
    }
  FUNCTION {or}
    {   { pop$ #1 }
      'skip$
        if$
    }
  STRINGS {z}

  FUNCTION {remove.dots}
  { 'z :=
  ""
  { z empty$ not }
{ z #1 #2 substring$
  duplicate$ "\." =
{ z #3 global.max$ substring$ 'z :=  * }
{ pop$
  z #1 #1 substring$
z #2 global.max$ substring$ 'z :=
duplicate$ "." = 'pop$
{ * }
if$
  }
  if$
}
while$
  }
  FUNCTION {new.block.checka}
    { empty$
        'skip$
      'new.block
      if$
    }
  FUNCTION {new.block.checkb}
    { empty$
        swap$ empty$
        and
        'skip$
      'new.block
      if$
    }
  FUNCTION {new.sentence.checka}
    { empty$
        'skip$
      'new.sentence
      if$
    }
  FUNCTION {new.sentence.checkb}
    { empty$
        swap$ empty$
        and
        'skip$
      'new.sentence
      if$
    }
  FUNCTION {field.or.null}
    { duplicate$ empty$
      { pop$ "" }
      'skip$
        if$
    }
  FUNCTION {emphasize}
    { skip$ }
  FUNCTION {bolden}
    { duplicate$ empty$
      { pop$ "" }
        { "\textbf{" swap$ * "}" * }
      if$
    }
  FUNCTION {tie.or.space.prefix}
    { duplicate$ text.length$ #3 <
        { "~" }
        { " " }
      if$
        swap$
    }

  FUNCTION {capitalize}
    { "u" change.case$ "t" change.case$ }

  FUNCTION {space.word}
    { " " swap$ * " " * }
  % Here are the language-specific definitions for explicit words.
  % Each function has a name bbl.xxx where xxx is the English word.
  %-------------------------------------------------------------------
  % Begin module:
  % \ProvidesFile{chinese.mbs}[2003/11/06 4.2 (PWD)]

  % The language selected here is CHINESE
  FUNCTION {bbl.and}
    { ""}

  FUNCTION {bbl.etal}
  {
  language empty$
{ "{et~al}" }
{ "等" }
if$
  }

  FUNCTION {bbl.editors}
    { "编辑" }

  FUNCTION {bbl.editor}
    { "编辑" }

  FUNCTION {bbl.edby}
    { "编辑" }

  FUNCTION {bbl.edition}
    { "版" }

  FUNCTION {bbl.volume}
    { "" }

  FUNCTION {bbl.of}
    { "//" }

  FUNCTION {bbl.number}
    { "第" }

  FUNCTION {bbl.nr}
    { "第" }

  FUNCTION {bbl.in}
    { "" }

  FUNCTION {bbl.pages}
    { "" }

  FUNCTION {bbl.page}
    { "" }

  FUNCTION {bbl.chapter}
    { "章" }

  FUNCTION {bbl.techrep}
    { "技术报告" }

  FUNCTION {bbl.mthesis}
    { "硕士学位论文" }

  FUNCTION {bbl.phdthesis}
    { "博士学位论文" }

  MACRO {jan} {"一月"}

  MACRO {feb} {"二月"}

  MACRO {mar} {"三月"}

  MACRO {apr} {"四月"}

  MACRO {may} {"五月"}

  MACRO {jun} {"六月"}

  MACRO {jul} {"七月"}

  MACRO {aug} {"八月"}

  MACRO {sep} {"九月"}

  MACRO {oct} {"十月"}

  MACRO {nov} {"十一月"}

  MACRO {dec} {"十二月"}

  % End module: chinese.mbs
  %% Copyright 1994-2011 Patrick W Daly
  MACRO {acmcs} {"ACM Computing Surveys"}

  MACRO {acta} {"Acta Informatica"}

  MACRO {cacm} {"Communications of the ACM"}

  MACRO {ibmjrd} {"IBM Journal of Research and Development"}

  MACRO {ibmsj} {"IBM Systems Journal"}

  MACRO {ieeese} {"IEEE Transactions on Software Engineering"}

  MACRO {ieeetc} {"IEEE Transactions on Computers"}

  MACRO {ieeetcad}
    {"IEEE Transactions on Computer-Aided Design of Integrated Circuits"}

  MACRO {ipl} {"Information Processing Letters"}

  MACRO {jacm} {"Journal of the ACM"}

  MACRO {jcss} {"Journal of Computer and System Sciences"}

  MACRO {scp} {"Science of Computer Programming"}

  MACRO {sicomp} {"SIAM Journal on Computing"}

  MACRO {tocs} {"ACM Transactions on Computer Systems"}

  MACRO {tods} {"ACM Transactions on Database Systems"}

  MACRO {tog} {"ACM Transactions on Graphics"}

  MACRO {toms} {"ACM Transactions on Mathematical Software"}

  MACRO {toois} {"ACM Transactions on Office Information Systems"}

  MACRO {toplas} {"ACM Transactions on Programming Languages and Systems"}

  MACRO {tcs} {"Theoretical Computer Science"}
  FUNCTION {bibinfo.check}
    { swap$
        duplicate$ missing$
        {
            pop$ pop$
            ""
          }
          { duplicate$ empty$
            {
                swap$ pop$
              }
              { swap$
                  pop$
              }
            if$
          }
        if$
    }
  FUNCTION {bibinfo.warn}
    { swap$
        duplicate$ missing$
        {
            swap$ "missing " swap$ * " in " * cite$ * warning$ pop$
            ""
          }
          { duplicate$ empty$
            {
                swap$ "empty " swap$ * " in " * cite$ * warning$
              }
              { swap$
                  pop$
              }
            if$
          }
        if$
    }
  FUNCTION {format.url}
    {
      url
      duplicate$ empty$
      { pop$ "" }
        { "\urlprefix\url{" swap$ * "}" * }
      if$
    }

  INTEGERS { nameptr namesleft numnames }


  STRINGS  { bibinfo}

  FUNCTION {format.names}
  { 'bibinfo :=
  duplicate$ empty$ 'skip$ {
's :=
"" 't :=
#1 'nameptr :=
s num.names$ 'numnames :=
  numnames 'namesleft :=
  { namesleft #0 > }
  { s nameptr
  "{vv~}{ll}{ f{~}}{ jj}"
  format.name$
remove.dots
bibinfo bibinfo.check
't :=
nameptr #1 >
{
nameptr #3
#1 + =
numnames #3
> and
  { "others" 't :=
    #1 'namesleft := }
'skip$
  if$
namesleft #1 >
{ ", " * t * }
{
s nameptr "{ll}" format.name$ duplicate$ "others" =
{ 't := }
{ pop$ }
  if$
"," *
t "others" =
{
" " * bbl.etal *
}
{ " " * t * }
if$
  }
  if$
}
't
if$
  nameptr #1 + 'nameptr :=
  namesleft #1 - 'namesleft :=
  }
  while$
} if$
  }
  FUNCTION {format.names.ed}
  {
  'bibinfo :=
  duplicate$ empty$ 'skip$ {
's :=
"" 't :=
#1 'nameptr :=
s num.names$ 'numnames :=
  numnames 'namesleft :=
  { namesleft #0 > }
  { s nameptr
  "{f{~}~}{vv~}{ll}{ jj}"
  format.name$
remove.dots
bibinfo bibinfo.check
't :=
nameptr #1 >
{
namesleft #1 >
{ ", " * t * }
{
s nameptr "{ll}" format.name$ duplicate$ "others" =
{ 't := }
{ pop$ }
  if$
"," *
t "others" =
{
" " * bbl.etal *
}
{ " " * t * }
if$
  }
  if$
}
't
if$
  nameptr #1 + 'nameptr :=
  namesleft #1 - 'namesleft :=
  }
  while$
} if$
  }
  FUNCTION {format.authors}
    { author "author" format.names
    }
  FUNCTION {get.bbl.editor}
    { editor num.names$ #1 > 'bbl.editors 'bbl.editor if$ }

  FUNCTION {format.editors}
    { editor "editor" format.names duplicate$ empty$ 'skip$
        {
            "," *
            " " *
            get.bbl.editor
            *
          }
        if$
    }
  FUNCTION {select.language}
  { duplicate$ empty$
  'pop$
{ language empty$
  'skip$
{ "{\selectlanguage{" language * "}" * swap$ * "}" * }
  if$
}
if$
  }

  FUNCTION {format.note}
  {
  note empty$
{ "" }
{ note #1 #1 substring$
  duplicate$ "{" =
'skip$
  { output.state mid.sentence =
        { "l" }
        { "u" }
      if$
        change.case$
    }
  if$
note #2 global.max$ substring$ * "note" bibinfo.check
}
if$
  }

  FUNCTION {format.title}
    { title
      "title" bibinfo.check
      duplicate$ empty$ 'skip$
        {
            select.language
          }
        if$
    }
  FUNCTION {output.bibitem}
    { newline$
        "\bibitem{" write$
            cite$ write$
          "}" write$
      newline$
      ""
      before.all 'output.state :=
    }

  FUNCTION {n.dashify}
  {
  't :=
  ""
  { t empty$ not }
{ t #1 #1 substring$ "-" =
  { t #1 #2 substring$ "--" = not
  { "--" *
    t #2 global.max$ substring$ 't :=
  }
  {   { t #1 #1 substring$ "-" = }
      { "-" *
        t #2 global.max$ substring$ 't :=
      }
    while$
  }
if$
  }
  { t #1 #1 substring$ *
t #2 global.max$ substring$ 't :=
}
if$
  }
  while$
}

FUNCTION {word.in}
  { "" }

FUNCTION {format.date}
  {
    ""
    duplicate$ empty$
    year  "year"  bibinfo.check duplicate$ empty$
    { swap$ 'skip$
        { "there's a month but no year in " cite$ * warning$ }
        if$
        *
      }
      { swap$ 'skip$
        {
            swap$
              " " * swap$
          }
        if$
        *
      }
    if$
  }
FUNCTION {format.btitle}
  { title "title" bibinfo.check
    duplicate$ empty$ 'skip$
      {
          select.language
        }
      if$
  }
FUNCTION {either.or.check}
  { empty$
      'pop$
    { "can't use both " swap$ * " fields in " * cite$ * warning$ }
    if$
  }
FUNCTION {format.bvolume}
  { volume empty$
      { "" }
        { bbl.volume volume tie.or.space.prefix
          "volume" bibinfo.check * *
          series "series" bibinfo.check
          duplicate$ empty$ 'pop$
            { swap$ bbl.of space.word * swap$
                emphasize * }
            if$
          "volume and number" number either.or.check
        }
      if$
  }
FUNCTION {format.number.series}
  { volume empty$
      { number empty$
            { series field.or.null }
              { series empty$
                  { number "number" bibinfo.check }
                    { output.state mid.sentence =
                        { bbl.number }
                        { bbl.number capitalize }
                      if$
                      number tie.or.space.prefix "number" bibinfo.check * *
                      bbl.in space.word *
                      series "series" bibinfo.check *
                    }
                  if$
              }
            if$
        }
        { "" }
      if$
  }

FUNCTION {format.edition}
  { edition duplicate$ empty$ 'skip$
      {
          output.state mid.sentence =
            { "l" }
            { "t" }
          if$ change.case$
          "edition" bibinfo.check
          " " * bbl.edition *
        }
      if$
  }
INTEGERS { multiresult }
FUNCTION {multi.page.check}
{ 't :=
#0 'multiresult :=
{ multiresult not
t empty$ not
  and
  }
  { t #1 #1 substring$
duplicate$ "-" =
  swap$ duplicate$ "," =
  swap$ "+" =
or or
  { #1 'multiresult := }
  { t #2 global.max$ substring$ 't := }
if$
  }
  while$
multiresult
}
FUNCTION {format.pages}
  { pages duplicate$ empty$ 'skip$
      { duplicate$ multi.page.check
              {
                n.dashify
              }
              {
              }
            if$
          "pages" bibinfo.check
        }
      if$
  }
FUNCTION {format.journal.pages}
  { pages duplicate$ empty$ 'pop$
      { swap$ duplicate$ empty$
            { pop$ pop$ format.pages }
              {
                ":" *
                swap$
                n.dashify
                "pages" bibinfo.check
                *
              }
            if$
        }
      if$
  }
FUNCTION {format.journal.eid}
  { eid "eid" bibinfo.check
    duplicate$ empty$ 'pop$
      { swap$ duplicate$ empty$ 'skip$
          {
              ":" *
            }
          if$
            swap$ *
        }
      if$
  }
FUNCTION {format.vol.num.pages}
  { volume field.or.null
    duplicate$ empty$ 'skip$
      {
          bbl.volume swap$ tie.or.space.prefix
          "volume" bibinfo.check
          * *
        }
      if$
    bolden
    number "number" bibinfo.check duplicate$ empty$ 'skip$
      {
          swap$ duplicate$ empty$
            { "there's a number but no volume in " cite$ * warning$ }
            'skip$
          if$
            swap$
          "(" swap$ * ")" *
        }
      if$ *
  }

FUNCTION {format.chapter.pages}
  { chapter empty$
      { "" }
        { type empty$
            { bbl.chapter }
              { type "l" change.case$
                "type" bibinfo.check
              }
            if$
          chapter tie.or.space.prefix
          "chapter" bibinfo.check
          * *
        }
      if$
  }

FUNCTION {format.booktitle}
  {
    booktitle "booktitle" bibinfo.check
  }
FUNCTION {format.in.ed.booktitle}
  { format.booktitle duplicate$ empty$ 'skip$
      {
          editor "editor" format.names.ed duplicate$ empty$ 'pop$
            {
                "," *
                " " *
                get.bbl.editor
                ", " *
                * swap$
                * }
            if$
          word.in swap$ *
        }
      if$
  }
FUNCTION {empty.misc.check}
  { author empty$ title empty$ howpublished empty$
      month empty$ year empty$ note empty$
    and and and and and
      { "all relevant fields are empty in " cite$ * warning$ }
    'skip$
      if$
  }
FUNCTION {format.thesis.type}
  { type duplicate$ empty$
    'pop$
      { swap$ pop$
          "t" change.case$ "type" bibinfo.check
        }
      if$
  }
FUNCTION {format.tr.number}
  { number "number" bibinfo.check
    type duplicate$ empty$
    { pop$ bbl.techrep }
    'skip$
      if$
    "type" bibinfo.check
    swap$ duplicate$ empty$
      { pop$ "t" change.case$ }
        { tie.or.space.prefix * * }
      if$
  }
FUNCTION {format.article.crossref}
  {
    key duplicate$ empty$
    { pop$
          journal duplicate$ empty$
          { "need key or journal for " cite$ * " to crossref " * crossref * warning$ }
            { "journal" bibinfo.check emphasize word.in swap$ * }
          if$
      }
      { word.in swap$ * " " *}
    if$
    " \cite{" * crossref * "}" *
  }
FUNCTION {format.crossref.editor}
{ editor #1 "{vv~}{ll}" format.name$
  "editor" bibinfo.check
  editor num.names$ duplicate$
  #2 >
  { pop$
"editor" bibinfo.check
" " * bbl.etal
*
}
{ #2 <
'skip$
  { editor #2 "{ff }{vv }{ll}{ jj}" format.name$ "others" =
{
"editor" bibinfo.check
" " * bbl.etal
*
}
{
bbl.and space.word
* editor #2 "{vv~}{ll}" format.name$
  "editor" bibinfo.check
  *
  }
  if$
}
if$
  }
  if$
}
FUNCTION {format.book.crossref}
  { volume duplicate$ empty$
    { "empty volume in " cite$ * "'s crossref of " * crossref * warning$
        pop$ word.in
      }
      { bbl.volume
        capitalize
        swap$ tie.or.space.prefix "volume" bibinfo.check * * bbl.of space.word *
      }
    if$
      editor empty$
    editor field.or.null author field.or.null =
    or
      { key empty$
          { series empty$
                { "need editor, key, or series for " cite$ * " to crossref " *
                      crossref * warning$
                    "" *
                  }
                  { series emphasize * }
                if$
            }
            { key * }
          if$
      }
      { format.crossref.editor * }
    if$
    " \cite{" * crossref * "}" *
  }
FUNCTION {format.incoll.inproc.crossref}
  {
    editor empty$
      editor field.or.null author field.or.null =
      or
        { key empty$
            { format.booktitle duplicate$ empty$
                { "need editor, key, or booktitle for " cite$ * " to crossref " *
                      crossref * warning$
                  }
                  { word.in swap$ * }
                if$
              }
              { word.in key * " " *}
            if$
        }
        { word.in format.crossref.editor * " " *}
      if$
    " \cite{" * crossref * "}" *
  }
FUNCTION {format.org.or.pub}
  { 't :=
    ""
    year empty$
      { "empty year in " cite$ * warning$ }
      'skip$
    if$
      address empty$ t empty$ and
      year empty$ and
    'skip$
      {
          address "address" bibinfo.check *
          t empty$
            'skip$
          { address empty$
                'skip$
              { ": " * }
              if$
              t *
            }
          if$
            year empty$
          'skip$
            { t empty$ address empty$ and
                'skip$
                  { ", " *}
                  if$
                year "year" bibinfo.check
                *
              }
            if$
        }
      if$
  }
FUNCTION {format.publisher.address}
  { publisher "publisher" bibinfo.warn format.org.or.pub
  }

FUNCTION {format.organization.address}
  { organization "organization" bibinfo.check format.org.or.pub
  }

FUNCTION {article}
{ output.bibitem
format.authors "author" output.check
new.block
format.title "[J]" * "title" output.check
new.block
crossref missing$
  {
      journal
      "journal" bibinfo.check
      "journal" output.check
      format.date "year" output.check
      %date.block
      format.vol.num.pages output
    }
    { format.article.crossref output.nonnull
    }
  if$
eid empty$
  { format.journal.pages }
    { format.journal.eid }
  if$
fin.entry
}
FUNCTION {book}
{ output.bibitem
author empty$
  { format.editors "author and editor" output.check
    }
    { format.authors output.nonnull
      crossref missing$
        { "author and editor" editor either.or.check }
        'skip$
      if$
    }
  if$
new.block
format.btitle "[M]" * "title" output.check
format.edition output
new.block
crossref missing$
  { format.bvolume output
      new.block
      new.sentence
      format.number.series output
      pages empty$
        { format.publisher.address output
            % new.sentence
            % format.pages output
          }
          { format.publisher.address ":" * format.pages * output }
        if$
    }
    {
      new.block
      format.book.crossref output.nonnull
      format.date "year" output.check
    }
  if$
fin.entry
}

FUNCTION {newspaper}
{ output.bibitem
author empty$
  { format.editors "author and editor" output.check
    }
    { format.authors output.nonnull
      crossref missing$
        { "author and editor" editor either.or.check }
        'skip$
      if$
    }
  if$
new.block
format.btitle "[N]" * "title" output.check
new.block
journal "journal" output.check
year  "-" * "year"  bibinfo.check output
no.blank.or.punct
month "-" * "month" bibinfo.check output
no.blank.or.punct
date "date" bibinfo.check output
fin.entry
}

FUNCTION {standard}
{ output.bibitem
key "key" output.check
new.block
format.title "[S]" * "title" output.check
new.block
format.publisher.address output
fin.entry
}

FUNCTION {inbook}
{ output.bibitem
format.authors "author" output.check
new.block
format.title "[A]" * "title" output.check
new.block
crossref missing$
  { format.in.ed.booktitle "[M]" * "booktitle" output.check
  %new.sentence
  publisher empty$
{ format.organization.address output }
  { organization "organization" bibinfo.check output
    format.publisher.address ":" * output
    no.blank.or.punct
  }
if$
  %format.bvolume output
  %format.number.series output
  }
  { format.incoll.inproc.crossref output.nonnull
  }
  if$
format.pages "pages" output.check
fin.entry
}

FUNCTION {incollection}{ inbook }
FUNCTION {inproceedings}
{ output.bibitem
format.authors "author" output.check
new.block
format.title "[A]" * "title" output.check
new.block
crossref missing$
  { format.in.ed.booktitle "[C]" * "booktitle" output.check
  %new.sentence
  publisher empty$
{ format.organization.address output }
  { organization "organization" bibinfo.check output
    format.publisher.address ":" * output
    no.blank.or.punct
  }
if$
  %format.bvolume output
  %format.number.series output
  }
  { format.incoll.inproc.crossref output.nonnull
  }
  if$
format.pages "pages" output.check
fin.entry
}
FUNCTION {conference} { inproceedings }

FUNCTION {manual}
{ output.bibitem
author empty$
  { organization "organization" bibinfo.check
      duplicate$ empty$ 'pop$
        { output
            address "address" bibinfo.check output
          }
        if$
    }
    { format.authors output.nonnull }
  if$
new.block
format.btitle "[EB/OL]" * "title" output.check
author empty$
  { organization empty$
        {
            address new.block.checka
            address "address" bibinfo.check output
          }
        'skip$
      if$
    }
    {
      organization address new.block.checkb
      organization "organization" bibinfo.check output
      address "address" bibinfo.check output
    }
  if$
new.block
format.url output
year  "-" * "year"  bibinfo.check output
no.blank.or.punct
month "-" * "month" bibinfo.check output
no.blank.or.punct
date "date" bibinfo.check output
new.block
format.note output
fin.entry
}

FUNCTION {database}
{ output.bibitem
author empty$
  { organization "organization" bibinfo.check
      duplicate$ empty$ 'pop$
        { output
            address "address" bibinfo.check output
          }
        if$
    }
    { format.authors output.nonnull }
  if$
new.block
format.btitle "[DB/OL]" * "title" output.check
author empty$
  { organization empty$
        {
            address new.block.checka
            address "address" bibinfo.check output
          }
        'skip$
      if$
    }
    {
      organization address new.block.checkb
      organization "organization" bibinfo.check output
      address "address" bibinfo.check output
    }
  if$
new.block
format.url output
year  "-" * "year"  bibinfo.check output
no.blank.or.punct
month "-" * "month" bibinfo.check output
no.blank.or.punct
date "date" bibinfo.check output
new.block
format.note output
fin.entry
}


FUNCTION {software}
{ output.bibitem
author empty$
  { organization "organization" bibinfo.check
      duplicate$ empty$ 'pop$
        { output
            address "address" bibinfo.check output
          }
        if$
    }
    { format.authors output.nonnull }
  if$
new.block
format.btitle "[CP/DK]" * "title" output.check
author empty$
  { organization empty$
        {
            address new.block.checka
            address "address" bibinfo.check output
          }
        'skip$
      if$
    }
    {
      organization address new.block.checkb
      organization "organization" bibinfo.check output
      address "address" bibinfo.check output
    }
  if$
new.block
format.url output
year  "-" * "year"  bibinfo.check output
no.blank.or.punct
month "-" * "month" bibinfo.check output
no.blank.or.punct
date "date" bibinfo.check output
new.block
format.note output
fin.entry
}

FUNCTION {mastersthesis}
{ output.bibitem
format.authors "author" output.check
new.block
format.btitle
"[D]" * "title" output.check
new.block
school "school" bibinfo.warn format.org.or.pub output
new.block
format.url output
new.block
format.note output
fin.entry
}

FUNCTION {phdthesis}{ mastersthesis }

FUNCTION {proceedings}
{ output.bibitem
editor empty$
  { organization "organization" bibinfo.check output
    }
    { format.editors output.nonnull }
  if$
new.block
format.btitle "[C]" * "title" output.check
format.bvolume output
format.number.series output
editor empty$
  { publisher empty$
        'skip$
      {
          new.sentence
          format.publisher.address output
        }
      if$
    }
    { publisher empty$
        {
            new.sentence
            format.organization.address output }
          {
            new.sentence
            organization "organization" bibinfo.check output
            format.publisher.address output
          }
        if$
    }
  if$
fin.entry
}

FUNCTION {techreport}
{ output.bibitem
format.authors "author" output.check
new.block
format.btitle
"[R]" * "title" output.check
new.block
institution "institution" bibinfo.warn format.org.or.pub output
fin.entry
}

FUNCTION {patent}
{ output.bibitem
format.authors "author" output.check
new.block
format.btitle
":" * "title" output.check
no.blank.or.punct
address "address" output.check
key "[P]" * "key" output.check
new.block
year  "-" * "year"  bibinfo.check output
no.blank.or.punct
month "-" * "month" bibinfo.check output
no.blank.or.punct
date "date" bibinfo.check output
fin.entry
}

FUNCTION {misc}
{ output.bibitem
format.authors "author" output.check
new.block
format.title "[Z]" * "title" output.check
format.date output
new.block
format.url output
new.block
format.note "note" output.check
fin.entry
}

FUNCTION {default.type} { misc }
READ
STRINGS { longest.label }
INTEGERS { number.label longest.label.width }
FUNCTION {initialize.longest.label}
  { "" 'longest.label :=
    #1 'number.label :=
    #0 'longest.label.width :=
  }
FUNCTION {longest.label.pass}
  { number.label int.to.str$ 'label :=
      number.label #1 + 'number.label :=
      label width$ longest.label.width >
      { label 'longest.label :=
        label width$ 'longest.label.width :=
      }
    'skip$
      if$
  }
EXECUTE {initialize.longest.label}
ITERATE {longest.label.pass}
FUNCTION {begin.bib}
  { preamble$ empty$
    'skip$
      { preamble$ write$ newline$ }
      if$
    "\begin{thebibliography}{"  longest.label  * "}" *
      write$ newline$
      "\providecommand{\url}[1]{\texttt{#1}}"
      write$ newline$
      "\providecommand{\urlprefix}{}"
      write$ newline$
      "\renewcommand{\selectlanguage}[1]{\relax}"
      write$ newline$
      "\providecommand{\bibAnnoteFile}[1]{%"
        write$ newline$
        "  \IfFileExists{#1}{\begin{quotation}\noindent\textsc{Key:} #1\\"
            write$ newline$
            "  \textsc{Annotation:}\ \input{#1}\end{quotation}}{}}"
      write$ newline$
      "\providecommand{\bibAnnote}[2]{%"
        write$ newline$
        "  \begin{quotation}\noindent\textsc{Key:} #1\\"
          write$ newline$
          "  \textsc{Annotation:}\ #2\end{quotation}}"
      write$ newline$
      }
      EXECUTE {begin.bib}
      EXECUTE {init.state.consts}
      ITERATE {call.type$}
      FUNCTION {end.bib}
      { newline$
      "\end{thebibliography}" write$ newline$
  }
EXECUTE {end.bib}
%% End of customized bst file
%%
%% End of file `sysuthesis.bst'.
